/**
<% it.parameters.forEach((parameter) => { %>
   * @param <%= parameter.name %> <%= parameter.optional ? '(optional)' : '' %> <%= parameter.name !== parameter.originalName ? `(API name: ${parameter.originalName})` : '' %>

<% }); -%>
   */
export function <%= it.swrOpName %>(<% it.parameters.forEach((parameter) => { %>
  <%= parameter.name %>: <%~ parameter.type %> <%= parameter.optional ? ' | null | undefined' : '' %>,
    <% }); %>
  $config?: SwrConfig
  ) {
  let url = '<%= it.url %>';
  const { axios: $axiosConf, key, ...config } = $config || {};

<% if(it.pathParams && it.pathParams.length > 0) {
  it.pathParams.forEach((parameter) => { %>
  url = url.replace('{<%= parameter.name %>}', encodeURIComponent(`${<%= parameter.name %>}`));
<% });
} %>

  let cacheUrl = url + '?';
<% if(it.query && it.query.length > 0) { %>
  <% it.query.forEach((parameter) => { %>
if (!!<%= parameter.name %>) {
    cacheUrl += `<%= parameter.originalName %>=${<%= parameter.name %>}&`;
  }

  <% }); %>
<% } %>
const { data, error, mutate } = useSWR<<%~ it.returnType %>>(
  key ?? cacheUrl,
  () => axios.request({
    url: url,
    method: '<%= it.method %>',
<% if(it.query && it.query.length > 0) { %>
    params: {
      <% it.query.forEach((parameter) => { %>
  '<%= parameter.originalName %>': serializeQueryParam(<%= parameter.name %>),
    <% }); %>
  },
<% } %>
<% if(it.headers && it.headers.length > 0) { %>
    headers: {
      <% it.headers.forEach((parameter) => { %>
    <% if (parameter.value) { %>
    '<%= parameter.originalName %>': '<%= parameter.value %>',
    <% } else { %>
    '<%= parameter.originalName %>': <%= parameter.name %>,
    <% } %>
    <% }); %>
      },
<% } %>
    ...$axiosConf})
    .then((resp) => resp.data),
  config);

  return {
    data,
    isLoading: !error && !data,
    error: error,
    mutate,
  };
}
