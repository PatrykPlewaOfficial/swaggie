<%~ it.jsDocs %>

export function <%= it.swrOpName %>(<% it.parameters.forEach((parameter) => { %>
  <%= parameter.name %><%= parameter.skippable ? '?' : '' %>: <%~ parameter.type %> <%= parameter.optional ? (parameter.skippable ? '| null' : '| null | undefined') : '' %>,
    <% }); %>
  $config?: SwrConfig
  ) {
  const url = `<%= it.url %>`;
  const { axios: $axiosConf, key, ...config } = $config || {};

  const cacheUrl = `${url}?<%
  if(it.query && it.query.length > 0) { %>${encodeParams({<%
    it.query.forEach((parameter) => { %>
'<%= parameter.originalName %>': <%= parameter.name %>,
    <% }); %>})}<% } %>`;

const { data, error, mutate } = useSWR<<%~ it.returnType %>>(
  key ?? cacheUrl,
  () => axios.request({
    url: url,
    method: '<%= it.method %>',
<% if(it.query && it.query.length > 0) { %>
    params: {
    <% it.query.forEach((parameter) => { %>
  '<%= parameter.originalName %>': <%= parameter.name %>,
    <% }); %>
},
<% } %>
<% if(it.headers && it.headers.length > 0) { %>
    headers: {
      <% it.headers.forEach((parameter) => { %>
    <% if (parameter.value) { %>
    '<%= parameter.originalName %>': '<%= parameter.value %>',
    <% } else { %>
    '<%= parameter.originalName %>': <%= parameter.name %>,
    <% } %>
    <% }); %>
      },
<% } %>
    ...$axiosConf})
    .then((resp) => resp.data),
  config);

  return {
    data,
    isLoading: !error && !data,
    error: error,
    mutate,
  };
}
