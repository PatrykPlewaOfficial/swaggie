  /**
<% it.parameters.forEach((parameter) => { %>
   * @param <%= parameter.name %> <%= parameter.optional ? '(optional)' : '' %> <%= parameter.name !== parameter.originalName ? `(API name: ${parameter.originalName})` : '' %>

<% }); -%>
   */
  <%= it.name %>(<% it.parameters.forEach((parameter) => { %>
<%= parameter.name %>: <%~ parameter.type %> <%= parameter.optional ? '| null | undefined' : '' %>,
    <% }); %>
$config?: RequestInit
  ): Promise<<%~ it.returnType %>> {
    const url = `${defaults.baseUrl}<%= it.url %>?<%
    if(it.query && it.query.length > 0) { %>${defaults.paramsSerializer({<%
      it.query.forEach((parameter) => { %>
'<%= parameter.originalName %>': <%= parameter.name %>,
      <% }); %>})}<% } %>`;

    return fetch(url, {
      method: '<%= it.method %>',
<% if(it.body) { %>
<% if(it.body.contentType === 'binary') { %>
      body: <%= it.body.name %>,
<% } else if(it.body.contentType === 'urlencoded') { %>
      body: new URLSearchParams(<%= it.body.name %> as any),
<% } else { %>
      body: JSON.stringify(<%= it.body.name %>),
<% } %>
<% } %>
<% if(it.headers && it.headers.length > 0) { %>
      headers: {
    <% it.headers.forEach((parameter) => { %>
    '<%= parameter.originalName %>': <%= parameter.name %> ?? '',
    <% }); %>
  },
<% } %>
      ...$config,
    })
<% if(it.responseContentType === 'binary') { %>
    .then((response) => response.blob() as Promise<<%~ it.returnType %>>);
<% } else if(it.responseContentType === 'text') { %>
    .then((response) => response.text() as Promise<<%~ it.returnType %>>);
<% } else { %>
    .then((response) => response.json() as Promise<<%~ it.returnType %>>);
<% } %>
  },
