/**
<% it.parameters.forEach((parameter) => { %>
   * @param <%= parameter.name %> <%= parameter.optional ? '(optional)' : '' %> <%= parameter.name !== parameter.originalName ? `(API name: ${parameter.originalName})` : '' %>

<% }); -%>
   * @return Success
   */
  <%= it.name %>(
    <% it.parameters.forEach((parameter) => { %>
<%= parameter.name %>: <%~ parameter.type %><%= parameter.optional ? ' | null | undefined' : '' %>,
    <% }); %>
config?: any
  ): Observable<<%~ it.returnType %>> {
    let url = '<%= it.url %>?';
<% if(it.pathParams && it.pathParams.length > 0) {
  it.pathParams.forEach((parameter) => { %>
    url = url.replace('{<%= parameter.name %>}', encodeURIComponent("" + <%= parameter.name %>));
<% });
} %>
<% if(it.formData && it.formData.length > 0) { %>
    const formDataBody = new FormData();
<% it.formData.forEach((parameter) => { %>
    if (!!<%= parameter.name %>) {
  <% if(parameter.original && parameter.original.type === 'array') { %>
    <%= parameter.name %>.forEach((f: any) => formDataBody.append("<%= parameter.originalName %>", f));
  <% } else { %>
    formDataBody.append("<%= parameter.originalName %>", <%= parameter.name %><%= parameter.type !== 'string' && parameter.type !== 'File' && parameter.type !== 'Blob' ? '.toString()' : '' %>);
  <% } %>
  }
<% });
} %>
<% if(it.query && it.query.length > 0) { %>
  <% it.query.forEach((parameter) => { %>
  if (<%= parameter.name %> !== undefined) {
  <% if(!!parameter.original && parameter.original.type === 'array') { %>
    <%= parameter.name %>.forEach(item => { url += '<%= parameter.originalName %>=' + encodeURIComponent("" + item) + "&"; });
  <% } else {%>
    url += '<%= parameter.originalName %>=' + encodeURIComponent("" + <%= parameter.name %>) + "&";
  <% } %>
  }
  <% }); %>
<% } %>

    return this.$<%= it.method.toLowerCase() %>(
      url,
<% if(['POST', 'PUT', 'PATCH'].includes(it.method)) { %>
      <%= it.body ? it.body.name : (it.formData && it.formData.length > 0) ? 'formDataBody' : 'null' %>,
<% } %>
      config
    );
  }
