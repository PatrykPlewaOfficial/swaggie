/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//   Generated using Swaggie (https://github.com/yhnavein/swaggie)
//   Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from "rxjs/operators";
import { Observable, throwError as _observableThrow, of as _observableOf } from "rxjs";
import { Injectable, Inject, Optional, InjectionToken } from "@angular/core";
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from "@angular/common/http";

export const <%- (servicePrefix || 'API').toUpperCase() -%>_BASE_URL = new InjectionToken<string>("<%- (servicePrefix || 'API').toUpperCase() -%>_BASE_URL");

abstract class BaseService {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: | ((key: string, value: any) => any) | undefined = undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(<%- (servicePrefix || 'API').toUpperCase() -%>_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  protected $get<T>(url: string, options?: any): Observable<T> {
    return this.http.get<T>(this.baseUrl + url, options).pipe(
      _observableMergeMap((response: any) => {
        return this.processSingle<T>(response);
      })
    );
  }

  protected $getAll<T>(url: string, options?: any): Observable<T[]> {
    return this.http.get(this.baseUrl + url, options).pipe(
      _observableMergeMap((response: any) => {
        return this.processMany<T>(response);
      })
    );
  }

  protected $delete<T>(url: string, options?: any): Observable<T> {
    return this.http.delete(this.baseUrl + url, options).pipe(
      _observableMergeMap((response: any) => {
        return this.processSingle<T>(response)
      })
    );
  }

  protected $post(url: string, data: any, options?: any): Observable<any> {
    return this.http.post(this.baseUrl + url, data, options).pipe(
      _observableMergeMap((response: any) => {
        return this.processSingle(response);
      })
    );
  }

  protected $patch<T>(url: string, data: any, options?: any): Observable<T> {
    return this.http.patch(this.baseUrl + url, data, options).pipe(
      _observableMergeMap((response: any) => {
        return this.processSingle<T>(response);
      })
    );
  }

  protected $put(url: string, data: any, options?: any): Observable<any> {
    return this.http.post(this.baseUrl + url, data, options).pipe(
      _observableMergeMap((response: any) => {
        return this.processSingle(response);
      })
    );
  }

  protected processSingle<T>(response: any): Observable<T> {
    var data = response.data;
    var status = response.status;

    if (status === 200 || status === 204 || status === 302) {
      return _observableOf(data);
    } else {
      return _observableThrow(response);
    }
  }

  protected processMany<T>(response: any): Observable<T[]> {
    var data = response.data;
    var status = response.status;

    if (status === 200 || status === 204 || status === 302) {
      return _observableOf(data);
    } else {
      return _observableThrow(response);
    }
  }
}

