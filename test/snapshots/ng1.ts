/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//   Generated using Swaggie (https://github.com/yhnavein/swaggie)
//   Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import { IHttpService, IRequestShortcutConfig, IPromise } from 'angular';

abstract class BaseService {
  constructor(protected readonly $http: IHttpService, public baseUrl: string) { }

  protected $get<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<T> {
    return this.$http.get(this.baseUrl + url, config).then((response: any) => {
      return this.processSingle<T>(response);
    });
  }

  protected $getAll<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<T[]> {
    return this.$http.get(this.baseUrl + url, config).then((response: any) => {
      return this.processMany<T>(response);
    });
  }

  protected $delete<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .delete(this.baseUrl + url, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $head<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http.head(this.baseUrl + url, config).then((response: any) => {
      return this.processSingle<T>(response);
    });
  }

  protected $jsonp<T>(
    url: string,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .jsonp(this.baseUrl + url, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $post<T>(
    url: string,
    data: any,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .post(this.baseUrl + url, data, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $put<T>(
    url: string,
    data: any,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .put(this.baseUrl + url, data, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected $patch<T>(
    url: string,
    data: any,
    config?: IRequestShortcutConfig
  ): IPromise<any> {
    return this.$http
      .patch(this.baseUrl + url, data, config)
      .then((response: any) => {
        return this.processSingle<T>(response);
      });
  }

  protected processSingle<T>(response: any): T {
    var data = response.data;
    var status = response.status;

    if (status >= 200 && status <= 299) {
      return data;
    } else {
      throw 'error_no_callback_for_the_received_http_status';
    }
  }

  protected processMany<T>(response: any): T[] {
    var data = response.data;
    var status = response.status;

    if (status >= 200 && status <= 299) {
      return data;
    } else {
      throw 'error_no_callback_for_the_received_http_status';
    }
  }
}

export class petService extends BaseService {
  /* @ngInject */
  constructor($http: IHttpService, ApiBaseUrl: string) {
    super($http, ApiBaseUrl);
  }

    /**
   * @param body  
   * @return Success
   */
  addPet(body: Pet ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = '/pet?';

    return this.$post(
      url,
        body,
        config
    );
  }

  /**
   * @param apiKey (optional) (API name: api_key)
   * @param petId  
   * @return Success
   */
  deletePet(apiKey: string  | null | undefined,
    petId: number ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = '/pet/{petId}?';
    url = url.replace('{petId}', encodeURIComponent("" + petId));

    return this.$delete(
      url,
      config
    );
  }

  /**
   * @param status  
   * @return Success
   */
  findPetsByStatus(status: ('available'|'pending'|'sold')[] ,
        config?: IRequestShortcutConfig
  ): IPromise<Pet[]> {
    let url = '/pet/findByStatus?';
    if (status !== undefined) {
      status.forEach(item => { url += serializeQueryParam(item, 'status') + "&"; });
    }
  
    return this.$get(
      url,
      config
    );
  }

  /**
   * @param tags  
   * @return Success
   */
  findPetsByTags(tags: string[] ,
        config?: IRequestShortcutConfig
  ): IPromise<Pet[]> {
    let url = '/pet/findByTags?';
    if (tags !== undefined) {
      tags.forEach(item => { url += serializeQueryParam(item, 'tags') + "&"; });
    }
  
    return this.$get(
      url,
      config
    );
  }

  /**
   * @param petId  
   * @return Success
   */
  getPetById(petId: number ,
        config?: IRequestShortcutConfig
  ): IPromise<Pet> {
    let url = '/pet/{petId}?';
    url = url.replace('{petId}', encodeURIComponent("" + petId));

    return this.$get(
      url,
      config
    );
  }

  /**
   * @param body  
   * @return Success
   */
  updatePet(body: Pet ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = '/pet?';

    return this.$put(
      url,
        body,
        config
    );
  }

  /**
   * @param petId  
   * @param name (optional) 
   * @param status (optional) 
   * @return Success
   */
  updatePetWithForm(petId: number ,
    name: string  | null | undefined,
    status: string  | null | undefined,
        config: IRequestShortcutConfig = {headers: {'Content-Type': undefined}}
  ): IPromise<unknown> {
    let url = '/pet/{petId}?';
    url = url.replace('{petId}', encodeURIComponent("" + petId));
    const formDataBody = new FormData();
      if (!!name) {
          formDataBody.append("name", name);
        }
    if (!!status) {
          formDataBody.append("status", status);
        }

    return this.$post(
      url,
          formDataBody,
        config
    );
  }

  /**
   * @param petId  
   * @param additionalMetadata (optional) 
   * @param file (optional) 
   * @return Success
   */
  uploadFile(petId: number ,
    additionalMetadata: string  | null | undefined,
    file: File  | null | undefined,
        config: IRequestShortcutConfig = {headers: {'Content-Type': undefined}}
  ): IPromise<ApiResponse> {
    let url = '/pet/{petId}/uploadImage?';
    url = url.replace('{petId}', encodeURIComponent("" + petId));
    const formDataBody = new FormData();
      if (!!additionalMetadata) {
          formDataBody.append("additionalMetadata", additionalMetadata);
        }
    if (!!file) {
          formDataBody.append("file", file);
        }

    return this.$post(
      url,
          formDataBody,
        config
    );
  }

}

export class storeService extends BaseService {
  /* @ngInject */
  constructor($http: IHttpService, ApiBaseUrl: string) {
    super($http, ApiBaseUrl);
  }

    /**
   * @param orderId  
   * @return Success
   */
  deleteOrder(orderId: number ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = '/store/order/{orderId}?';
    url = url.replace('{orderId}', encodeURIComponent("" + orderId));

    return this.$delete(
      url,
      config
    );
  }

  /**
   * @return Success
   */
  getInventory(    config?: IRequestShortcutConfig
  ): IPromise<{ [key: string]: number }> {
    let url = '/store/inventory?';

    return this.$get(
      url,
      config
    );
  }

  /**
   * @param orderId  
   * @return Success
   */
  getOrderById(orderId: number ,
        config?: IRequestShortcutConfig
  ): IPromise<Order> {
    let url = '/store/order/{orderId}?';
    url = url.replace('{orderId}', encodeURIComponent("" + orderId));

    return this.$get(
      url,
      config
    );
  }

  /**
   * @param body  
   * @return Success
   */
  placeOrder(body: Order ,
        config?: IRequestShortcutConfig
  ): IPromise<Order> {
    let url = '/store/order?';

    return this.$post(
      url,
        body,
        config
    );
  }

}

export class userService extends BaseService {
  /* @ngInject */
  constructor($http: IHttpService, ApiBaseUrl: string) {
    super($http, ApiBaseUrl);
  }

    /**
   * @param body  
   * @return Success
   */
  createUser(body: User ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = '/user?';

    return this.$post(
      url,
        body,
        config
    );
  }

  /**
   * @param body  
   * @return Success
   */
  createUsersWithArrayInput(body: User[] ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = '/user/createWithArray?';

    return this.$post(
      url,
        body,
        config
    );
  }

  /**
   * @param body  
   * @return Success
   */
  createUsersWithListInput(body: User[] ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = '/user/createWithList?';

    return this.$post(
      url,
        body,
        config
    );
  }

  /**
   * @param username  
   * @return Success
   */
  deleteUser(username: string ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = '/user/{username}?';
    url = url.replace('{username}', encodeURIComponent("" + username));

    return this.$delete(
      url,
      config
    );
  }

  /**
   * @param username  
   * @return Success
   */
  getUserByName(username: string ,
        config?: IRequestShortcutConfig
  ): IPromise<User> {
    let url = '/user/{username}?';
    url = url.replace('{username}', encodeURIComponent("" + username));

    return this.$get(
      url,
      config
    );
  }

  /**
   * @param username  
   * @param password  
   * @return Success
   */
  loginUser(username: string ,
    password: string ,
        config?: IRequestShortcutConfig
  ): IPromise<string> {
    let url = '/user/login?';
    if (username !== undefined) {
      url += serializeQueryParam(username, 'username') + "&";
    }
    if (password !== undefined) {
      url += serializeQueryParam(password, 'password') + "&";
    }
  
    return this.$get(
      url,
      config
    );
  }

  /**
   * @return Success
   */
  logoutUser(    config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = '/user/logout?';

    return this.$get(
      url,
      config
    );
  }

  /**
   * @param username  
   * @param body  
   * @return Success
   */
  updateUser(username: string ,
    body: User ,
        config?: IRequestShortcutConfig
  ): IPromise<unknown> {
    let url = '/user/{username}?';
    url = url.replace('{username}', encodeURIComponent("" + username));

    return this.$put(
      url,
        body,
        config
    );
  }

}

export class ApiServices {
  public static bootstrap(moduleName: string, baseUrl: string) {
    angular
      .module(moduleName)
      .constant('ApiBaseUrl', baseUrl)
      .service('petService', petService)
      .service('storeService', storeService)
      .service('userService', userService)
;
  }
}

function serializeQueryParam(obj: any, property: string): string {
  if (obj === null || obj === undefined || obj === '') {
    return '';
  } else if (obj instanceof Date) {
    return property + '=' + encodeURIComponent(obj.toJSON());
  } else if (Array.isArray(obj)) {
    return Object.values(obj)
      .map(value => `${property}[]=${value}`)
      .join('&');
  } else if (typeof obj !== 'object') {
    return property + '=' + encodeURIComponent(obj);
  } else if (typeof obj === 'object') {
    return Object.keys(obj)
      .filter(key => !!serializeQueryParam(obj[key], property + '.' + key))
      .reduce(
        (a: any, b) =>
          a.push(serializeQueryParam(obj[b], property + '.' + b)) && a,
        []
      )
      .join('&');
  } else {
    return '';
  }
}
export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;
}

export interface Category {
  id?: number;
  name?: string;
}

export interface Pet {
  name: string;
  photoUrls: string[];
  id?: number;
  category?: Category;
  tags?: Tag[];

  status?: 'available'|'pending'|'sold';
}

export interface Tag {
  id?: number;
  name?: string;
}

export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: Date;

  status?: 'placed'|'approved'|'delivered';
  complete?: boolean;
}

export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;

  userStatus?: number;
}
