/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//   Generated using Swaggie (https://github.com/yhnavein/swaggie)
//   Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

export const defaults = {
  baseUrl: '',
};

export const petClient = {
    /**
   * @param body  
   */
  addPet(body: Pet ,
    $config?: RequestInit
  ): Promise<Pet> {
    let url = defaults.baseUrl + '/pet?';

    return fetch(url, {
      method: 'POST',
      body: JSON.stringify(body),
      ...$config,
    }).then((response) => response.json() as Promise<Pet>);
  },

  /**
   * @param apiKey (optional) (API name: api_key)
   * @param petId  
   */
  deletePet(apiKey: string | null | undefined,
    petId: number ,
    $config?: RequestInit
  ): Promise<unknown> {
    let url = defaults.baseUrl + '/pet/{petId}?';
    url = url.replace('{petId}', encodeURIComponent("" + petId));

    return fetch(url, {
      method: 'DELETE',
      headers: {
        'api_key': apiKey,
      },
      ...$config,
    }).then((response) => response.json() as Promise<unknown>);
  },

  /**
   * @param status (optional) 
   */
  findPetsByStatus(status: ("available" | "pending" | "sold") | null | undefined,
    $config?: RequestInit
  ): Promise<Pet[]> {
    let url = defaults.baseUrl + '/pet/findByStatus?';
    if (status !== undefined) {
      url += 'status=' + serializeQueryParam(status) + "&";
    }
  
    return fetch(url, {
      method: 'GET',
      ...$config,
    }).then((response) => response.json() as Promise<Pet[]>);
  },

  /**
   * @param tags (optional) 
   */
  findPetsByTags(tags: string[] | null | undefined,
    $config?: RequestInit
  ): Promise<Pet[]> {
    let url = defaults.baseUrl + '/pet/findByTags?';
    if (tags !== undefined) {
      url += 'tags=' + serializeQueryParam(tags) + "&";
    }
  
    return fetch(url, {
      method: 'GET',
      ...$config,
    }).then((response) => response.json() as Promise<Pet[]>);
  },

  /**
   * @param petId  
   */
  getPetById(petId: number ,
    $config?: RequestInit
  ): Promise<Pet> {
    let url = defaults.baseUrl + '/pet/{petId}?';
    url = url.replace('{petId}', encodeURIComponent("" + petId));

    return fetch(url, {
      method: 'GET',
      ...$config,
    }).then((response) => response.json() as Promise<Pet>);
  },

  /**
   * @param body  
   */
  updatePet(body: Pet ,
    $config?: RequestInit
  ): Promise<Pet> {
    let url = defaults.baseUrl + '/pet?';

    return fetch(url, {
      method: 'PUT',
      body: JSON.stringify(body),
      ...$config,
    }).then((response) => response.json() as Promise<Pet>);
  },

  /**
   * @param petId  
   * @param name (optional) 
   * @param status (optional) 
   */
  updatePetWithForm(petId: number ,
    name: string | null | undefined,
    status: string | null | undefined,
    $config?: RequestInit
  ): Promise<unknown> {
    let url = defaults.baseUrl + '/pet/{petId}?';
    url = url.replace('{petId}', encodeURIComponent("" + petId));
    if (name !== undefined) {
      url += 'name=' + serializeQueryParam(name) + "&";
    }
    if (status !== undefined) {
      url += 'status=' + serializeQueryParam(status) + "&";
    }
  
    return fetch(url, {
      method: 'POST',
      ...$config,
    }).then((response) => response.json() as Promise<unknown>);
  },

  /**
   * @param petId  
   * @param additionalMetadata (optional) 
   */
  uploadFile(petId: number ,
    additionalMetadata: string | null | undefined,
    $config?: RequestInit
  ): Promise<ApiResponse> {
    let url = defaults.baseUrl + '/pet/{petId}/uploadImage?';
    url = url.replace('{petId}', encodeURIComponent("" + petId));
    if (additionalMetadata !== undefined) {
      url += 'additionalMetadata=' + serializeQueryParam(additionalMetadata) + "&";
    }
  
    return fetch(url, {
      method: 'POST',
      ...$config,
    }).then((response) => response.json() as Promise<ApiResponse>);
  },

};
export const storeClient = {
    /**
   * @param orderId  
   */
  deleteOrder(orderId: number ,
    $config?: RequestInit
  ): Promise<unknown> {
    let url = defaults.baseUrl + '/store/order/{orderId}?';
    url = url.replace('{orderId}', encodeURIComponent("" + orderId));

    return fetch(url, {
      method: 'DELETE',
      ...$config,
    }).then((response) => response.json() as Promise<unknown>);
  },

  /**
   */
  getInventory($config?: RequestInit
  ): Promise<{ [key: string]: number }> {
    let url = defaults.baseUrl + '/store/inventory?';

    return fetch(url, {
      method: 'GET',
      ...$config,
    }).then((response) => response.json() as Promise<{ [key: string]: number }>);
  },

  /**
   * @param orderId  
   */
  getOrderById(orderId: number ,
    $config?: RequestInit
  ): Promise<Order> {
    let url = defaults.baseUrl + '/store/order/{orderId}?';
    url = url.replace('{orderId}', encodeURIComponent("" + orderId));

    return fetch(url, {
      method: 'GET',
      ...$config,
    }).then((response) => response.json() as Promise<Order>);
  },

  /**
   * @param body (optional) 
   */
  placeOrder(body: Order | null | undefined,
    $config?: RequestInit
  ): Promise<Order> {
    let url = defaults.baseUrl + '/store/order?';

    return fetch(url, {
      method: 'POST',
      body: JSON.stringify(body),
      ...$config,
    }).then((response) => response.json() as Promise<Order>);
  },

};
export const userClient = {
    /**
   * @param body (optional) 
   */
  createUser(body: User | null | undefined,
    $config?: RequestInit
  ): Promise<User> {
    let url = defaults.baseUrl + '/user?';

    return fetch(url, {
      method: 'POST',
      body: JSON.stringify(body),
      ...$config,
    }).then((response) => response.json() as Promise<User>);
  },

  /**
   * @param body (optional) 
   */
  createUsersWithListInput(body: User[] | null | undefined,
    $config?: RequestInit
  ): Promise<User> {
    let url = defaults.baseUrl + '/user/createWithList?';

    return fetch(url, {
      method: 'POST',
      body: JSON.stringify(body),
      ...$config,
    }).then((response) => response.json() as Promise<User>);
  },

  /**
   * @param username  
   */
  deleteUser(username: string ,
    $config?: RequestInit
  ): Promise<unknown> {
    let url = defaults.baseUrl + '/user/{username}?';
    url = url.replace('{username}', encodeURIComponent("" + username));

    return fetch(url, {
      method: 'DELETE',
      ...$config,
    }).then((response) => response.json() as Promise<unknown>);
  },

  /**
   * @param username  
   */
  getUserByName(username: string ,
    $config?: RequestInit
  ): Promise<User> {
    let url = defaults.baseUrl + '/user/{username}?';
    url = url.replace('{username}', encodeURIComponent("" + username));

    return fetch(url, {
      method: 'GET',
      ...$config,
    }).then((response) => response.json() as Promise<User>);
  },

  /**
   * @param username (optional) 
   * @param password (optional) 
   */
  loginUser(username: string | null | undefined,
    password: string | null | undefined,
    $config?: RequestInit
  ): Promise<string> {
    let url = defaults.baseUrl + '/user/login?';
    if (username !== undefined) {
      url += 'username=' + serializeQueryParam(username) + "&";
    }
    if (password !== undefined) {
      url += 'password=' + serializeQueryParam(password) + "&";
    }
  
    return fetch(url, {
      method: 'GET',
      ...$config,
    }).then((response) => response.json() as Promise<string>);
  },

  /**
   */
  logoutUser($config?: RequestInit
  ): Promise<unknown> {
    let url = defaults.baseUrl + '/user/logout?';

    return fetch(url, {
      method: 'GET',
      ...$config,
    }).then((response) => response.json() as Promise<unknown>);
  },

  /**
   * @param body (optional) 
   * @param username  
   */
  updateUser(body: User | null | undefined,
    username: string ,
    $config?: RequestInit
  ): Promise<unknown> {
    let url = defaults.baseUrl + '/user/{username}?';
    url = url.replace('{username}', encodeURIComponent("" + username));

    return fetch(url, {
      method: 'PUT',
      body: JSON.stringify(body),
      ...$config,
    }).then((response) => response.json() as Promise<unknown>);
  },

};

function serializeQueryParam(obj: any) {
  if (obj === null || obj === undefined) return '';
  if (obj instanceof Date) return encodeURIComponent(obj.toJSON());
  if (typeof obj !== 'object' || Array.isArray(obj)) return encodeURIComponent(obj);
  return Object.keys(obj)
    .reduce((a: any, b) => a.push(encodeURIComponent(b) + '=' + encodeURIComponent(obj[b])) && a, [])
    .join('&');
}

export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: Date;
// Order Status
  status?: ("placed" | "approved" | "delivered");
  complete?: boolean;}

export interface Customer {
  id?: number;
  username?: string;
  address?: Address[];}

export interface Address {
  street?: string;
  city?: string;
  state?: string;
  zip?: string;}

export interface Category {
  id?: number;
  name?: string;}

export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
// User Status
  userStatus?: number;}

export interface Tag {
  id?: number;
  name?: string;}

export interface Pet {
  id?: number;
  name: string;
  category?: Category;
  photoUrls: string[];
  tags?: Tag[];
// pet status in the store
  status?: ("available" | "pending" | "sold");}

export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;}
