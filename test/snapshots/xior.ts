/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//   Generated using Swaggie (https://github.com/yhnavein/swaggie)
//   Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import xior, { type XiorResponse, type XiorRequestConfig } from "xior";

export const http = xior.create({
  baseURL: '',
});

export const petClient = {
    /**
   * @param body  
   */
  addPet(body: Pet ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/pet';

    return http.request<unknown>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

  /**
   * @param apiKey (optional) (API name: api_key)
   * @param petId  
   */
  deletePet(apiKey: string | null | undefined,
    petId: number ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/pet/{petId}';
    url = url.replace('{petId}', encodeURIComponent("" + petId));

    return http.request<unknown>({
      url: url,
      method: 'DELETE',
      headers: {
        'api_key': apiKey,
      },
      ...$config,
    });
  },

  /**
   * @param status  
   */
  findPetsByStatus(status: ('available'|'pending'|'sold')[] ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Pet[]>> {
    let url = '/pet/findByStatus';

    return http.request<Pet[]>({
      url: url,
      method: 'GET',
      params: {
        'status': serializeQueryParam(status),
      },
      ...$config,
    });
  },

  /**
   * @param tags  
   */
  findPetsByTags(tags: string[] ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Pet[]>> {
    let url = '/pet/findByTags';

    return http.request<Pet[]>({
      url: url,
      method: 'GET',
      params: {
        'tags': serializeQueryParam(tags),
      },
      ...$config,
    });
  },

  /**
   * @param petId  
   */
  getPetById(petId: number ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Pet>> {
    let url = '/pet/{petId}';
    url = url.replace('{petId}', encodeURIComponent("" + petId));

    return http.request<Pet>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

  /**
   * @param body  
   */
  updatePet(body: Pet ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/pet';

    return http.request<unknown>({
      url: url,
      method: 'PUT',
      data: body,
      ...$config,
    });
  },

  /**
   * @param petId  
   * @param name (optional) 
   * @param status (optional) 
   */
  updatePetWithForm(petId: number ,
    name: string | null | undefined,
    status: string | null | undefined,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/pet/{petId}';
    url = url.replace('{petId}', encodeURIComponent("" + petId));
    const formDataBody = new FormData();
      if (!!name) {
          formDataBody.append("name", name);
        }
    if (!!status) {
          formDataBody.append("status", status);
        }

    return http.request<unknown>({
      url: url,
      method: 'POST',
      data: formDataBody,
      ...$config,
    });
  },

  /**
   * @param petId  
   * @param additionalMetadata (optional) 
   * @param file (optional) 
   */
  uploadFile(petId: number ,
    additionalMetadata: string | null | undefined,
    file: File | null | undefined,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<ApiResponse>> {
    let url = '/pet/{petId}/uploadImage';
    url = url.replace('{petId}', encodeURIComponent("" + petId));
    const formDataBody = new FormData();
      if (!!additionalMetadata) {
          formDataBody.append("additionalMetadata", additionalMetadata);
        }
    if (!!file) {
          formDataBody.append("file", file);
        }

    return http.request<ApiResponse>({
      url: url,
      method: 'POST',
      data: formDataBody,
      ...$config,
    });
  },

};

export const storeClient = {
    /**
   * @param orderId  
   */
  deleteOrder(orderId: number ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/store/order/{orderId}';
    url = url.replace('{orderId}', encodeURIComponent("" + orderId));

    return http.request<unknown>({
      url: url,
      method: 'DELETE',
      ...$config,
    });
  },

  /**
   */
  getInventory($config?: XiorRequestConfig
  ): Promise<XiorResponse<{ [key: string]: number }>> {
    let url = '/store/inventory';

    return http.request<{ [key: string]: number }>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

  /**
   * @param orderId  
   */
  getOrderById(orderId: number ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Order>> {
    let url = '/store/order/{orderId}';
    url = url.replace('{orderId}', encodeURIComponent("" + orderId));

    return http.request<Order>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

  /**
   * @param body  
   */
  placeOrder(body: Order ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Order>> {
    let url = '/store/order';

    return http.request<Order>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

};

export const userClient = {
    /**
   * @param body  
   */
  createUser(body: User ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/user';

    return http.request<unknown>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

  /**
   * @param body  
   */
  createUsersWithArrayInput(body: User[] ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/user/createWithArray';

    return http.request<unknown>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

  /**
   * @param body  
   */
  createUsersWithListInput(body: User[] ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/user/createWithList';

    return http.request<unknown>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

  /**
   * @param username  
   */
  deleteUser(username: string ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/user/{username}';
    url = url.replace('{username}', encodeURIComponent("" + username));

    return http.request<unknown>({
      url: url,
      method: 'DELETE',
      ...$config,
    });
  },

  /**
   * @param username  
   */
  getUserByName(username: string ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<User>> {
    let url = '/user/{username}';
    url = url.replace('{username}', encodeURIComponent("" + username));

    return http.request<User>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

  /**
   * @param username  
   * @param password  
   */
  loginUser(username: string ,
    password: string ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<string>> {
    let url = '/user/login';

    return http.request<string>({
      url: url,
      method: 'GET',
      params: {
        'username': serializeQueryParam(username),
        'password': serializeQueryParam(password),
      },
      ...$config,
    });
  },

  /**
   */
  logoutUser($config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/user/logout';

    return http.request<unknown>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

  /**
   * @param username  
   * @param body  
   */
  updateUser(username: string ,
    body: User ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    let url = '/user/{username}';
    url = url.replace('{username}', encodeURIComponent("" + username));

    return http.request<unknown>({
      url: url,
      method: 'PUT',
      data: body,
      ...$config,
    });
  },

};


function serializeQueryParam(obj: any) {
  if (obj === null || obj === undefined) return '';
  if (obj instanceof Date) return obj.toJSON();
  if (typeof obj !== 'object' || Array.isArray(obj)) return obj;
  return Object.keys(obj)
    .reduce((a: any, b) => a.push(b + '=' + obj[b]) && a, [])
    .join('&');
}

export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;
}

export interface Category {
  id?: number;
  name?: string;
}

export interface Pet {
  name: string;
  photoUrls: string[];
  id?: number;
  category?: Category;
  tags?: Tag[];

  status?: 'available'|'pending'|'sold';
}

export interface Tag {
  id?: number;
  name?: string;
}

export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: Date;

  status?: 'placed'|'approved'|'delivered';
  complete?: boolean;
}

export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;

  userStatus?: number;
}
