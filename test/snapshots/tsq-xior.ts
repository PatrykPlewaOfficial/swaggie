/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//   Generated using Swaggie (https://github.com/yhnavein/swaggie)
//   Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import xior, { type XiorResponse, type XiorRequestConfig, encodeParams } from "xior";
import { QueryClient, type UseQueryOptions, useQuery } from '@tanstack/react-query';

export const queryClient = new QueryClient();

export const http = xior.create({
  baseURL: '',
  paramsSerializer: (params) =>
    encodeParams(params, true, null, {
      allowDots: true,
      arrayFormat: 'repeat',
    }),
});

export const petClient = {
    /**
   * @param body  
   */
  addPet(body: Pet ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Pet>> {
    const url = `/pet`;

    return http.request<Pet>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

  /**
   * @param apiKey (optional) (API name: api_key)
   * @param petId  
   */
  deletePet(apiKey: string | null | undefined,
    petId: number ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    const url = `/pet/${encodeURIComponent(`${petId}`)}`;

    return http.request<unknown>({
      url: url,
      method: 'DELETE',
      headers: {
        'api_key': apiKey,
      },
      ...$config,
    });
  },

  /**
   * @param status (optional) 
   */
  findPetsByStatus(status: ("available" | "pending" | "sold") | null | undefined,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Pet[]>> {
    const url = `/pet/findByStatus`;

    return http.request<Pet[]>({
      url: url,
      method: 'GET',
      params: {
        'status': status,
      },
      ...$config,
    });
  },

  /**
   * @param tags (optional) 
   */
  findPetsByTags(tags: string[] | null | undefined,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Pet[]>> {
    const url = `/pet/findByTags`;

    return http.request<Pet[]>({
      url: url,
      method: 'GET',
      params: {
        'tags': tags,
      },
      ...$config,
    });
  },

  /**
   * @param petId  
   */
  getPetById(petId: number ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Pet>> {
    const url = `/pet/${encodeURIComponent(`${petId}`)}`;

    return http.request<Pet>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

  /**
   * @param body  
   */
  updatePet(body: Pet ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Pet>> {
    const url = `/pet`;

    return http.request<Pet>({
      url: url,
      method: 'PUT',
      data: new URLSearchParams(body as any),
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      ...$config,
    });
  },

  /**
   * @param petId  
   * @param name (optional) 
   * @param status (optional) 
   */
  updatePetWithForm(petId: number ,
    name: string | null | undefined,
    status: string | null | undefined,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    const url = `/pet/${encodeURIComponent(`${petId}`)}`;

    return http.request<unknown>({
      url: url,
      method: 'POST',
      params: {
        'name': name,
        'status': status,
      },
      ...$config,
    });
  },

  /**
   * @param body (optional) 
   * @param petId  
   * @param additionalMetadata (optional) 
   */
  uploadFile(body: File | null | undefined,
    petId: number ,
    additionalMetadata: string | null | undefined,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<File>> {
    const url = `/pet/${encodeURIComponent(`${petId}`)}/uploadImage`;

    return http.request<File>({
      url: url,
      method: 'POST',
      data: body,
      params: {
        'additionalMetadata': additionalMetadata,
      },
      ...$config,
    });
  },

};


  /**
   * @param status (optional) 
   * @param $config (optional) Additional configuration for TanStack Query
   * @param $httpConfig (optional) Additional configuration for xior request (actually executes the request)
   */
export function usepetfindPetsByStatus<TData = Pet[], TError = Error>(  status: ("available" | "pending" | "sold")  | null | undefined,
    $config?: Omit<
  UseQueryOptions<Pet[], TError, TData>,
  'queryKey' | 'queryFn'
>,
    $httpConfig?: XiorRequestConfig
  ) {
  return useQuery<Pet[], TError, TData>({
    queryKey: ['pet', 'petfindPetsByStatus', status, ],
    queryFn: () => petClient.findPetsByStatus(status, $httpConfig).then(res => res.data),
    ...$config
  });
}
usepetfindPetsByStatus.queryKeys = ['pet', 'petfindPetsByStatus'];

  /**
   * @param tags (optional) 
   * @param $config (optional) Additional configuration for TanStack Query
   * @param $httpConfig (optional) Additional configuration for xior request (actually executes the request)
   */
export function usepetfindPetsByTags<TData = Pet[], TError = Error>(  tags: string[]  | null | undefined,
    $config?: Omit<
  UseQueryOptions<Pet[], TError, TData>,
  'queryKey' | 'queryFn'
>,
    $httpConfig?: XiorRequestConfig
  ) {
  return useQuery<Pet[], TError, TData>({
    queryKey: ['pet', 'petfindPetsByTags', tags, ],
    queryFn: () => petClient.findPetsByTags(tags, $httpConfig).then(res => res.data),
    ...$config
  });
}
usepetfindPetsByTags.queryKeys = ['pet', 'petfindPetsByTags'];

  /**
   * @param petId  
   * @param $config (optional) Additional configuration for TanStack Query
   * @param $httpConfig (optional) Additional configuration for xior request (actually executes the request)
   */
export function usepetPetById<TData = Pet, TError = Error>(  petId: number ,
    $config?: Omit<
  UseQueryOptions<Pet, TError, TData>,
  'queryKey' | 'queryFn'
>,
    $httpConfig?: XiorRequestConfig
  ) {
  return useQuery<Pet, TError, TData>({
    queryKey: ['pet', 'petPetById', petId, ],
    queryFn: () => petClient.getPetById(petId, $httpConfig).then(res => res.data),
    ...$config
  });
}
usepetPetById.queryKeys = ['pet', 'petPetById'];

  export const storeClient = {
    /**
   * @param orderId  
   */
  deleteOrder(orderId: number ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    const url = `/store/order/${encodeURIComponent(`${orderId}`)}`;

    return http.request<unknown>({
      url: url,
      method: 'DELETE',
      ...$config,
    });
  },

  /**
   */
  getInventory($config?: XiorRequestConfig
  ): Promise<XiorResponse<{ [key: string]: number }>> {
    const url = `/store/inventory`;

    return http.request<{ [key: string]: number }>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

  /**
   * @param orderId  
   */
  getOrderById(orderId: number ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Order>> {
    const url = `/store/order/${encodeURIComponent(`${orderId}`)}`;

    return http.request<Order>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

  /**
   * @param body (optional) 
   */
  placeOrder(body: Order | null | undefined,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<Order>> {
    const url = `/store/order`;

    return http.request<Order>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

};


  /**
   * @param $config (optional) Additional configuration for TanStack Query
   * @param $httpConfig (optional) Additional configuration for xior request (actually executes the request)
   */
export function usestoreInventory<TData = { [key: string]: number }, TError = Error>($config?: Omit<
  UseQueryOptions<{ [key: string]: number }, TError, TData>,
  'queryKey' | 'queryFn'
>,
    $httpConfig?: XiorRequestConfig
  ) {
  return useQuery<{ [key: string]: number }, TError, TData>({
    queryKey: ['store', 'storeInventory', ],
    queryFn: () => storeClient.getInventory($httpConfig).then(res => res.data),
    ...$config
  });
}
usestoreInventory.queryKeys = ['store', 'storeInventory'];

  /**
   * @param orderId  
   * @param $config (optional) Additional configuration for TanStack Query
   * @param $httpConfig (optional) Additional configuration for xior request (actually executes the request)
   */
export function usestoreOrderById<TData = Order, TError = Error>(  orderId: number ,
    $config?: Omit<
  UseQueryOptions<Order, TError, TData>,
  'queryKey' | 'queryFn'
>,
    $httpConfig?: XiorRequestConfig
  ) {
  return useQuery<Order, TError, TData>({
    queryKey: ['store', 'storeOrderById', orderId, ],
    queryFn: () => storeClient.getOrderById(orderId, $httpConfig).then(res => res.data),
    ...$config
  });
}
usestoreOrderById.queryKeys = ['store', 'storeOrderById'];

  export const userClient = {
    /**
   * @param body (optional) 
   */
  createUser(body: User | null | undefined,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<User>> {
    const url = `/user`;

    return http.request<User>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

  /**
   * @param body (optional) 
   */
  createUsersWithListInput(body: User[] | null | undefined,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<User>> {
    const url = `/user/createWithList`;

    return http.request<User>({
      url: url,
      method: 'POST',
      data: body,
      ...$config,
    });
  },

  /**
   * @param username  
   */
  deleteUser(username: string ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    const url = `/user/${encodeURIComponent(`${username}`)}`;

    return http.request<unknown>({
      url: url,
      method: 'DELETE',
      ...$config,
    });
  },

  /**
   * @param username  
   */
  getUserByName(username: string ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<User>> {
    const url = `/user/${encodeURIComponent(`${username}`)}`;

    return http.request<User>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

  /**
   * @param username (optional) 
   * @param password (optional) 
   */
  loginUser(username: string | null | undefined,
    password: string | null | undefined,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<string>> {
    const url = `/user/login`;

    return http.request<string>({
      url: url,
      method: 'GET',
      params: {
        'username': username,
        'password': password,
      },
      ...$config,
    });
  },

  /**
   */
  logoutUser($config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    const url = `/user/logout`;

    return http.request<unknown>({
      url: url,
      method: 'GET',
      ...$config,
    });
  },

  /**
   * @param body (optional) 
   * @param username  
   */
  updateUser(body: FormData | null | undefined,
    username: string ,
    $config?: XiorRequestConfig
  ): Promise<XiorResponse<unknown>> {
    const url = `/user/${encodeURIComponent(`${username}`)}`;

    return http.request<unknown>({
      url: url,
      method: 'PUT',
      data: body,
      ...$config,
    });
  },

};


  /**
   * @param username  
   * @param $config (optional) Additional configuration for TanStack Query
   * @param $httpConfig (optional) Additional configuration for xior request (actually executes the request)
   */
export function useuserUserByName<TData = User, TError = Error>(  username: string ,
    $config?: Omit<
  UseQueryOptions<User, TError, TData>,
  'queryKey' | 'queryFn'
>,
    $httpConfig?: XiorRequestConfig
  ) {
  return useQuery<User, TError, TData>({
    queryKey: ['user', 'userUserByName', username, ],
    queryFn: () => userClient.getUserByName(username, $httpConfig).then(res => res.data),
    ...$config
  });
}
useuserUserByName.queryKeys = ['user', 'userUserByName'];

  /**
   * @param username (optional) 
   * @param password (optional) 
   * @param $config (optional) Additional configuration for TanStack Query
   * @param $httpConfig (optional) Additional configuration for xior request (actually executes the request)
   */
export function useuserloginUser<TData = string, TError = Error>(  username: string  | null | undefined,
      password: string  | null | undefined,
    $config?: Omit<
  UseQueryOptions<string, TError, TData>,
  'queryKey' | 'queryFn'
>,
    $httpConfig?: XiorRequestConfig
  ) {
  return useQuery<string, TError, TData>({
    queryKey: ['user', 'userloginUser', username, password, ],
    queryFn: () => userClient.loginUser(username, password, $httpConfig).then(res => res.data),
    ...$config
  });
}
useuserloginUser.queryKeys = ['user', 'userloginUser'];

  /**
   * @param $config (optional) Additional configuration for TanStack Query
   * @param $httpConfig (optional) Additional configuration for xior request (actually executes the request)
   */
export function useuserlogoutUser<TData = unknown, TError = Error>($config?: Omit<
  UseQueryOptions<unknown, TError, TData>,
  'queryKey' | 'queryFn'
>,
    $httpConfig?: XiorRequestConfig
  ) {
  return useQuery<unknown, TError, TData>({
    queryKey: ['user', 'userlogoutUser', ],
    queryFn: () => userClient.logoutUser($httpConfig).then(res => res.data),
    ...$config
  });
}
useuserlogoutUser.queryKeys = ['user', 'userlogoutUser'];

  export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: Date;
/** Order Status */
  status?: ("placed" | "approved" | "delivered");
  complete?: boolean;}

export interface Customer {
  id?: number;
  username?: string;
  address?: Address[];}

export interface Address {
  street?: string;
  city?: string;
  state?: string;
  zip?: string;}

export interface Category {
  id?: number;
  name?: string;}

export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
/** User Status */
  userStatus?: number;}

export interface Tag {
  id?: number;
  name?: string;}

export interface Pet {
  id?: number;
  name: string;
  category?: Category;
  photoUrls: string[];
  tags?: Tag[];
/** pet status in the store */
  status?: ("available" | "pending" | "sold");}

export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;}
