{
  "$id": "https://github.com/yhnavein/swaggie/blob/master/schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Swaggie Settings Schema",
  "definitions": {
    "QueryParamsSerialization": {
      "additionalProperties": true,
      "description": "Settings for query parameters serialization",
      "properties": {
        "allowDots": {
          "description": "Determines if dots should be used for serialization object properties. Otherwise brackets will be used",
          "type": "boolean",
          "default": true
        },
        "arrayFormat": {
          "description": "Determines how arrays should be serialized",
          "enum": [
            "indices",
            "repeat",
            "brackets"
          ],
          "type": "string",
          "default": "repeat"
        }
      }
    },
    "Globals": {
      "additionalProperties": true,
      "description": "Main settings of the application",
      "properties": {
        "out": {
          "description": "The path to the file where the API would be generated. Use stdout if left empty.",
          "type": "string"
        },
        "src": {
          "description": "The url or path to the Open API spec file. Both JSON and YAML are supported",
          "type": "string"
        },
        "template": {
          "default": "axios",
          "description": "Template that will be used for generating the API client. You can reference bundled templates by name or provide path to the custom template as well",
          "examples": [
            "axios",
            "xior",
            "swr-axios",
            "fetch",
            "ng1",
            "ng2"
          ],
          "type": "string"
        },
        "baseUrl": {
          "default": "",
          "description": "Base URL that will be used as a default value in the clients",
          "type": "string"
        },
        "preferAny": {
          "default": false,
          "description": "Use `any` type instead of `unknown`",
          "type": "boolean"
        },
        "servicePrefix": {
          "default": "",
          "description": "Prefix for service names. Useful when you have multiple APIs and you want to avoid name collisions",
          "type": "string"
        },
        "dateFormat": {
          "default": "Date",
          "description": "It determines how Date fields will be handled and what type they will have in models",
          "enum": [
            "Date",
            "string"
          ],
          "type": "string"
        },
        "queryParamsSerialization": {
          "$ref": "#/definitions/QueryParamsSerialization"
        }
      },
      "required": [
        "out",
        "src"
      ],
      "type": "object"
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/Globals"
    }
  ]
}
